在设计原则中有这样一句话“我们应该针对接口编程，而不是针对实现编程”。
但是我们还是在一直使用new关键字来创建一个对象，这不就是在针对实现编程么？

针对接口编程，可以隔离掉以后系统可能发生的一大堆改变。
入口代码是针对接口而写，那么可以通过多态，它可以与任何新类实现该接口。
但是，当代码使用一大堆的具体类时，等于是自找麻烦，因为一旦加入新的具体类，就必须要改变代码。
在这里我们希望能够调用一个简单的方法，我传递一个参数过去，就可以返回给我一个相应的具体对象，这个时候我们就可以使用简单工厂模式。

一、基本定义
简单工厂模式又称之为静态工厂方法，属于创建型模式。在简单工厂模式中，可以根据传递的参数不同，返回不同类的实例。
简单工厂模式定义了一个类，这个类专门用于创建其他类的实例，这些被创建的类都有一个共同的父类。

二、模式结构
模式分析：
    Factory：工厂角色。专门用于创建实例类的工厂，提供一个方法，该方法根据传递的参数不同返回不同类的具体实例。
    Product：抽象产品角色。为所有产品的父类。
    ConcreteProduct：具体的产品角色。
简单工厂模式将对象的创建和对象本身业务处理分离了，可以降低系统的耦合度，使得两者修改起来都相对容易些。
当以后实现改变时，只需要修改工厂类即可。

三、简单工厂模式实现
模式场景：
    在一个披萨店中，要根据不同客户的口味，生产不同的披萨，如素食披萨、希腊披萨等披萨。